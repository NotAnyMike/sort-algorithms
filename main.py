import time
input_vector = [2381,3855,3627,3619,1158,3170,4419,432,7670,7033,989,8296,1900,7227,473,660,3961,9722,7028,8346,6999,6660,9945,8574,4441,1193,728,4641,1070,4762,7663,7538,1594,552,858,9534,729,429,858,9657,275,3562,6893,3168,1379,8349,6302,7277,4664,6308,7721,3639,2113,8736,5717,660,4255,3929,5316,6617,9545,6069,2971,784,9120,632,1381,3505,2053,4510,1834,1660,6123,2015,225,2391,7184,7691,1341,8077,6800,4443,8931,1911,5138,3767,3702,989,4123,9556,6522,1065,2086,180,3442,2089,2584,6557,5572,5264,5937,894,2667,9744,4840,9351,1723,1548,795,8598,5631,3440,5732,3336,3142,9145,1622,3999,5601,5218,2565,2832,6717,7750,7471,5660,6621,779,5367,7362,6992,1336,8833,2110,7582,2454,537,7908,8402,8295,7047,493,3583,1062,2685,3510,1455,3916,1396,5195,2416,7766,2001,3064,1193,6122,1123,2319,6201,4703,5754,4209,9593,7509,3361,7470,8510,9572,8004,5084,5582,2285,7217,6070,6713,8000,4561,760,5026,9587,2265,7148,5508,3430,4735,5378,1320,4984,7547,2869,7283,4820,1119,9028,7922,5199,3676,5844,8578,7253,4384,239,6071,179,5446,1885,970,1108,7241,2317,735,5422,590,7367,9059,6852,1639,9570,1161,1495,6558,2177,1072,944,5054,6953,455,6140,3683,1314,3954,6389,7961,9346,480,5572,3857,6549,3180,9187,4260,2486,2536,5342,4274,4383,6682,7345,4758,6241,6483,9468,7729,35,2973,8694,9203,684,960,7871,445,2971,1269,5123,5883,2381,7713,9159,3573,6007,9713,6495,3207,9790,1775,5181,4528,6909,311,3796,5390,8281,6990,5561,9150,6107,9561,1424,8131,6012,520,2125,3717,8156,2831,3222,6210,7583,987,5039,7430,1396,5545,1675,5536,7135,8185,1846,7711,4176,3148,6974,1668,4624,8191,8535,7900,9094,5646,1306,4198,7616,6835,797,5141,6228,4574,7311,2355,593,9246,3203,5476,4938,9288,5661,3268,6729,457,1917,9882,6285,5366,2458,8320,8373,1149,5040,7173,7277,3364,6223,7367,8862,9329,8708,8977,8149,3061,9804,8648,5327,7805,5609,3190,111,9273,1066,9297,8383,9826,9408,4928,5159,177,590,324,6406,1463,4542,7734,9047,4148,4484,3137,7295,3315,207,2258,9627,4776,3040,7754,8894,8683,3065,4849,5193,4939,3834,8107,4557,5368,1042,6483,7923,4130,7155,2621,1792,1310,294,6784,1229,9950,855,5809,1204,8898,9337,5947,6079,4588,4378,9761,4774,9863,2066,7025,2347,2145,943,5738,2151,6186,3320,3273,232,3799,1039,860,5707,5092,5359,347,7349,5711,1493,895,9615,8183,336,4168,4502,7840,4640,1047,9967,9858,7587,8835,5644,8574,2127,9291,913,9595,4370,4082,516,6969,5368,2089,2757,3364,319,5257,2709,6298,6011,8956,9194,6679,285,8805,2324,8139,6789,9908,5522,6922,5276,9940,6253,4016,391,6741,9367,9093,494,957,889,7134,7212,5168,4938,7344,7793,4013,3500,3160,6509,4348,2253,6853,6708,7922,4699,8341,6269,9338,1038,3123,88,9472,3674,2452,2426,7442,1074,3341,5064,4692,8271,6667,2885,5521,4597,5156,8257,4230,2399,4710,1986,9766,2541,3290,6918,8197,9366,3715,2516,5521,7856,4186,6155,4766,7268,8839,6191,4916,2812,9661,4404,2361,6546,4395,2878,8049,7744,8742,4331,6965,1731,6036,5805,3527,5588,2278,7137,6451,8743,3218,4968,1848,485,4477,5862,3899,8782,9626,5390,8446,5839,1932,1775,62,5748,3862,5668,9669,5952,8063,5356,1927,7342,7118,5295,4132,4188,7689,4323,3982,4925,1970,2410,7145,9770,3336,4374,275,790,7129,8575,738,3418,7927,6151,4231,6846,1749,6087,8453,2337,102,4306,9537,6176,5448,7956,8651,7077,5477,9137,8403,9188,5705,6154,915,8386,3025,4674,6460,2862,6470,9041,2309,7066,3402,5843,5035,5844,5997,3371,8937,7158,9205,4285,109,4770,7166,6779,9641,2656,6600,1494,3321,2807,195,6823,2834,8156,2091,776,2176,3674,1705,3220,64,8438,6524,5024,1924,1530,1178,1076,8586,6140,7464,6449,6742,2416,452,873,4203,637,6550,3835,6543,4666,2094,5416,3220,8630,3069,5338,3827,8803,2711,4275,4840,2734,3509,500,8366,2243,6335,6032,7473,1354,4870,5291,8228,3580,2594,3118,2923,5351,4039,1727,1328,6480,439,8613,9857,87,7257,9800,3250,6536,3487,1311,1512,5192,5316,999,3176,1190,2647,7364,7246,3585,438,992,2480,1524,9686,1642,7627,6724,4542,6015,5711,4508,9066,7178,6761,5939,845,827,2272,2578,9050,6291,5975,2144,432,640,726,6831,7900,1358,1939,5573,7684,2464,3643,6349,9412,1315,2670,6516,6367,4085,6947,2101,1740,537,8315,5405,3388,6213,2536,191,4194,4725,2582,1399,7846,1893,9390,7110,8893,3276,8824,49,339,5271,20,3899,1296,534,6912,78,3277,8228,8508,3667,805,2261,5008,7100,8295,8725,6662,2806,679,648,9779,9933,8267,7982,2678,335,9141,4259,2305,7151,1143,1914,4449,8060,6554,319,3301,694,9044,8323,1657,801,665,1851,7998,9222,9174,291,2467,4154,453,7487,1100,7648,5491,1500,3292,6306,2623,6913,4301,1696,6848,4348,768,725,4542,553,6674,4245,1799,4554,6164,2367,638,7971,4721,6654,4880,3059,1996,8340,1125,1744,7978,5960,2203,5623,3821,7645,5801,9271,9354,5823,8760,6080,5288,4269,5054,2192,2151,1067,1283,9404,7905,2940,6728,8341,9066,7855,498,6213,567,1363,1895,139,4412,1494,4669,7357,8097,813,8521,8209,9332,4083,7093,4763,6288,1184,7014,8938,3101,9267,4628,2434,1101,4859,2002,211,843,4826,861,2938,5143,4266,6695,3301,4080,6612,4621,232,1020,3036,5609,3872,5473,7964,6197,133,8847,8215,2565,2391,9832,6410,4373,7956,1178,505,388,9785]
ordered = [20,35,49,62,64,78,87,88,102,109,111,133,139,177,179,180,191,195,207,211,225,232,232,239,275,275,285,291,294,311,319,319,324,335,336,339,347,388,391,429,432,432,438,439,445,452,453,455,457,473,480,485,493,494,498,500,505,516,520,534,537,537,552,553,567,590,590,593,632,637,638,640,648,660,660,665,679,684,694,725,726,728,729,735,738,760,768,776,779,784,790,795,797,801,805,813,827,843,845,855,858,858,860,861,873,889,894,895,913,915,943,944,957,960,970,987,989,989,992,999,1020,1038,1039,1042,1047,1062,1065,1066,1067,1070,1072,1074,1076,1100,1101,1108,1119,1123,1125,1143,1149,1158,1161,1178,1178,1184,1190,1193,1193,1204,1229,1269,1283,1296,1306,1310,1311,1314,1315,1320,1328,1336,1341,1354,1358,1363,1379,1381,1396,1396,1399,1424,1455,1463,1493,1494,1494,1495,1500,1512,1524,1530,1548,1594,1622,1639,1642,1657,1660,1668,1675,1696,1705,1723,1727,1731,1740,1744,1749,1775,1775,1792,1799,1834,1846,1848,1851,1885,1893,1895,1900,1911,1914,1917,1924,1927,1932,1939,1970,1986,1996,2001,2002,2015,2053,2066,2086,2089,2089,2091,2094,2101,2110,2113,2125,2127,2144,2145,2151,2151,2176,2177,2192,2203,2243,2253,2258,2261,2265,2272,2278,2285,2305,2309,2317,2319,2324,2337,2347,2355,2361,2367,2381,2381,2391,2391,2399,2410,2416,2416,2426,2434,2452,2454,2458,2464,2467,2480,2486,2516,2536,2536,2541,2565,2565,2578,2582,2584,2594,2621,2623,2647,2656,2667,2670,2678,2685,2709,2711,2734,2757,2806,2807,2812,2831,2832,2834,2862,2869,2878,2885,2923,2938,2940,2971,2971,2973,3025,3036,3040,3059,3061,3064,3065,3069,3101,3118,3123,3137,3142,3148,3160,3168,3170,3176,3180,3190,3203,3207,3218,3220,3220,3222,3250,3268,3273,3276,3277,3290,3292,3301,3301,3315,3320,3321,3336,3336,3341,3361,3364,3364,3371,3388,3402,3418,3430,3440,3442,3487,3500,3505,3509,3510,3527,3562,3573,3580,3583,3585,3619,3627,3639,3643,3667,3674,3674,3676,3683,3702,3715,3717,3767,3796,3799,3821,3827,3834,3835,3855,3857,3862,3872,3899,3899,3916,3929,3954,3961,3982,3999,4013,4016,4039,4080,4082,4083,4085,4123,4130,4132,4148,4154,4168,4176,4186,4188,4194,4198,4203,4209,4230,4231,4245,4255,4259,4260,4266,4269,4274,4275,4285,4301,4306,4323,4331,4348,4348,4370,4373,4374,4378,4383,4384,4395,4404,4412,4419,4441,4443,4449,4477,4484,4502,4508,4510,4528,4542,4542,4542,4554,4557,4561,4574,4588,4597,4621,4624,4628,4640,4641,4664,4666,4669,4674,4692,4699,4703,4710,4721,4725,4735,4758,4762,4763,4766,4770,4774,4776,4820,4826,4840,4840,4849,4859,4870,4880,4916,4925,4928,4938,4938,4939,4968,4984,5008,5024,5026,5035,5039,5040,5054,5054,5064,5084,5092,5123,5138,5141,5143,5156,5159,5168,5181,5192,5193,5195,5199,5218,5257,5264,5271,5276,5288,5291,5295,5316,5316,5327,5338,5342,5351,5356,5359,5366,5367,5368,5368,5378,5390,5390,5405,5416,5422,5446,5448,5473,5476,5477,5491,5508,5521,5521,5522,5536,5545,5561,5572,5572,5573,5582,5588,5601,5609,5609,5623,5631,5644,5646,5660,5661,5668,5705,5707,5711,5711,5717,5732,5738,5748,5754,5801,5805,5809,5823,5839,5843,5844,5844,5862,5883,5937,5939,5947,5952,5960,5975,5997,6007,6011,6012,6015,6032,6036,6069,6070,6071,6079,6080,6087,6107,6122,6123,6140,6140,6151,6154,6155,6164,6176,6186,6191,6197,6201,6210,6213,6213,6223,6228,6241,6253,6269,6285,6288,6291,6298,6302,6306,6308,6335,6349,6367,6389,6406,6410,6449,6451,6460,6470,6480,6483,6483,6495,6509,6516,6522,6524,6536,6543,6546,6549,6550,6554,6557,6558,6600,6612,6617,6621,6654,6660,6662,6667,6674,6679,6682,6695,6708,6713,6717,6724,6728,6729,6741,6742,6761,6779,6784,6789,6800,6823,6831,6835,6846,6848,6852,6853,6893,6909,6912,6913,6918,6922,6947,6953,6965,6969,6974,6990,6992,6999,7014,7025,7028,7033,7047,7066,7077,7093,7100,7110,7118,7129,7134,7135,7137,7145,7148,7151,7155,7158,7166,7173,7178,7184,7212,7217,7227,7241,7246,7253,7257,7268,7277,7277,7283,7295,7311,7342,7344,7345,7349,7357,7362,7364,7367,7367,7430,7442,7464,7470,7471,7473,7487,7509,7538,7547,7582,7583,7587,7616,7627,7645,7648,7663,7670,7684,7689,7691,7711,7713,7721,7729,7734,7744,7750,7754,7766,7793,7805,7840,7846,7855,7856,7871,7900,7900,7905,7908,7922,7922,7923,7927,7956,7956,7961,7964,7971,7978,7982,7998,8000,8004,8049,8060,8063,8077,8097,8107,8131,8139,8149,8156,8156,8183,8185,8191,8197,8209,8215,8228,8228,8257,8267,8271,8281,8295,8295,8296,8315,8320,8323,8340,8341,8341,8346,8349,8366,8373,8383,8386,8402,8403,8438,8446,8453,8508,8510,8521,8535,8574,8574,8575,8578,8586,8598,8613,8630,8648,8651,8683,8694,8708,8725,8736,8742,8743,8760,8782,8803,8805,8824,8833,8835,8839,8847,8862,8893,8894,8898,8931,8937,8938,8956,8977,9028,9041,9044,9047,9050,9059,9066,9066,9093,9094,9120,9137,9141,9145,9150,9159,9174,9187,9188,9194,9203,9205,9222,9246,9267,9271,9273,9288,9291,9297,9329,9332,9337,9338,9346,9351,9354,9366,9367,9390,9404,9408,9412,9468,9472,9534,9537,9545,9556,9561,9570,9572,9587,9593,9595,9615,9626,9627,9641,9657,9661,9669,9686,9713,9722,9744,9761,9766,9770,9779,9785,9790,9800,9804,9826,9832,9857,9858,9863,9882,9908,9933,9940,9945,9950,9967]

############################## Mike's algorithms ################################
def quicksort(input_vector):
    if len(input_vector) > 1:
        smaller = []
        greater = []
        pivot = input_vector[len(input_vector)-1]
        del input_vector[len(input_vector)-1]
        for x in input_vector:
            if x > pivot:
                greater.append(x)
            else:
                smaller.append(x)

        smaller = quicksort(smaller)
        greater = quicksort(greater)

        return smaller + [pivot] + greater

    else:
        return input_vector

############################## someone else algorithm ###############################

def shellsort(random):
    length = len(random)
    gap = int(length/2)

    while(gap >=1):
            i=gap
            while(i <length):
                    value=random[i]
                    j=i
                    while(j -gap >=0 and value < random[j-gap]):
                            random[j]=random[j-gap]
                            j -=gap
                    random[j]=value
                    i+=1
            gap = int(gap/2)
    return random

############################## someone else algorithm ###############################

def merge_sort(A):
    return merge_sort2(A, 0, len(A)-1)
	
def merge_sort2(A, first, last):
    if first < last:
            middle = (first + last)//2
            merge_sort2(A, first, middle)
            merge_sort2(A, middle+1, last)
            A = merge(A, first, middle, last)

    return A
		
def merge(A, first, middle, last):
    L = A[first:middle+1]
    R = A[middle+1:last+1]
    L.append(999999)
    R.append(999999)
    i = j = 0
    
    for k in range (first, last+1):
            if L[i] <= R[j]:
                    A[k] = L[i]
                    i += 1
            else:
                    A[k] = R[j]
                    j += 1

    return A

############################## someone else algorithm ###############################

def combsort(input):
    gap = len(input)
    swaps = True
    while gap > 1 or swaps:
        gap = max(1, int(gap / 1.25))
        swaps = False
        for i in range(len(input) - gap):
            j = i+gap
            if input[i] > input[j]:
                input[i], input[j] = input[j], input[i]
                swaps = True

    return input

################################################################################

def evaluate(func, input_vector):
    start_time = time.time()
    result = func(input_vector)
    end_time = time.time()

    string = func.__name__ + ": "
    t = end_time - start_time

    if result == ordered:
        string = string + "it worked and took " + str(t)
    else: 
        string = string +  "it didn't work and took " + str(t)

    string = string + " seconds"
    print string
    print "the number of elements returned are "+ str(len(result)) + " it must be 1000\n"
    
evaluate(quicksort, input_vector)
evaluate(shellsort, input_vector)
evaluate(merge_sort, input_vector)
evaluate(combsort, input_vector)
